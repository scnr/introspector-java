[1mdiff --git a/README.md b/README.md[m
[1mindex 836f299..c7c568d 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -6,6 +6,7 @@[m
 * `path_ends_with`[m
 * `path_include_pattern`[m
 * `path_exclude_pattern`[m
[32m+[m[32m* `source_directory`[m
 [m
 ## Load middleware[m
 [m
[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex c8accbf..f302965 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -1,6 +1,6 @@[m
 <project>[m
     <modelVersion>4.0.0</modelVersion>[m
[31m-    <groupId>com.ecsypno</groupId>[m
[32m+[m[32m    <groupId>com.ecsypno.introspector</groupId>[m
     <artifactId>introspector</artifactId>[m
     <version>1.0</version>[m
     <properties>[m
[1mdiff --git a/src/main/java/com/ecsypno/introspector/agent/InstrumentationAgent.java b/src/main/java/com/ecsypno/introspector/agent/InstrumentationAgent.java[m
[1mindex 5a707c3..c2487b4 100644[m
[1m--- a/src/main/java/com/ecsypno/introspector/agent/InstrumentationAgent.java[m
[1m+++ b/src/main/java/com/ecsypno/introspector/agent/InstrumentationAgent.java[m
[36m@@ -3,45 +3,68 @@[m [mpackage com.ecsypno.introspector.agent;[m
 import java.lang.instrument.Instrumentation;[m
 import java.util.HashMap;[m
 import java.util.Map;[m
[32m+[m[32mimport java.util.Set;[m
 [m
 public class InstrumentationAgent {[m
[31m-    [m
     private static final Map<String, String> options = new HashMap<>();[m
[32m+[m[32m    private static final String DEFAULT_SOURCE_DIR = "src";[m
[32m+[m
[32m+[m[32m    private static final Set<String> VALID_OPTIONS = Set.of([m
[32m+[m[32m        "path_start_with",[m
[32m+[m[32m        "path_ends_with",[m[41m [m
[32m+[m[32m        "path_include_pattern",[m
[32m+[m[32m        "path_exclude_pattern",[m
[32m+[m[32m        "source_directory"[m
[32m+[m[32m    );[m
 [m
     public static void premain(String agentArgs, Instrumentation inst) {[m
         System.out.println("Initializing Codename SCNR Introspector agent...");[m
         [m
[31m-        parseAgentArgs(agentArgs);[m
[31m-        [m
[31m-        if( getOption("source_directory") == null ) {[m
[31m-            options.put("source_directory", "src/main/java");[m
[32m+[m[32m        try {[m
[32m+[m[32m            parseAgentArgs(agentArgs);[m
[32m+[m[32m            validateRequiredOptions();[m
[32m+[m[32m            ClassTransformer.setInstrumentation(inst);[m
[32m+[m[32m            inst.addTransformer(new ClassTransformer(), true);[m
[32m+[m[32m        } catch (IllegalArgumentException e) {[m
[32m+[m[32m            System.err.println("Agent initialization failed: " + e.getMessage());[m
[32m+[m[32m            System.err.println("Valid options are: " + String.join(", ", VALID_OPTIONS));[m
         }[m
[31m-        [m
[31m-[m
[31m-        ClassTransformer.setInstrumentation(inst);[m
[31m-        inst.addTransformer(new ClassTransformer(), true);[m
[31m-    }[m
[31m-    [m
[31m-    public static void agentmain(String agentArgs, Instrumentation inst) {[m
[31m-        System.out.println("Attaching Codename SCNR Introspector agent...");[m
[31m-        parseAgentArgs(agentArgs);[m
[31m-        ClassTransformer.setInstrumentation(inst);[m
[31m-        inst.addTransformer(new ClassTransformer(), true);[m
     }[m
 [m
     private static void parseAgentArgs(String agentArgs) {[m
[31m-        if (agentArgs != null && !agentArgs.isEmpty()) {[m
[31m-            String[] args = agentArgs.split(",");[m
[31m-            for (String arg : args) {[m
[31m-                String[] keyValue = arg.split("=");[m
[31m-                if (keyValue.length == 2) {[m
[31m-                    options.put(keyValue[0], keyValue[1]);[m
[31m-                }[m
[32m+[m[32m        // Set default source directory[m
[32m+[m[32m        options.put("source_directory", DEFAULT_SOURCE_DIR);[m
[32m+[m
[32m+[m[32m        if (agentArgs == null || agentArgs.isEmpty()) {[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        String[] args = agentArgs.split(",");[m
[32m+[m[32m        for (String arg : args) {[m
[32m+[m[32m            String[] keyValue = arg.split("=");[m
[32m+[m[32m            if (keyValue.length != 2) {[m
[32m+[m[32m                throw new IllegalArgumentException("Invalid argument format: " + arg);[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            String key = keyValue[0].trim();[m
[32m+[m[32m            if (!VALID_OPTIONS.contains(key)) {[m
[32m+[m[32m                throw new IllegalArgumentException("Invalid option: " + key);[m
             }[m
[32m+[m[41m            [m
[32m+[m[32m            options.put(key, keyValue[1].trim());[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static void validateRequiredOptions() {[m
[32m+[m[32m        if (!options.containsKey("source_directory")) {[m
[32m+[m[32m            throw new IllegalArgumentException("Required option missing: source_directory");[m
         }[m
     }[m
 [m
     public static String getOption(String key) {[m
[32m+[m[32m        if (!VALID_OPTIONS.contains(key)) {[m
[32m+[m[32m            throw new IllegalArgumentException("Invalid option requested: " + key);[m
[32m+[m[32m        }[m
         return options.get(key);[m
     }[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
